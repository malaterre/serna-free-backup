<?xml version='1.0' encoding='UTF-8'?>
<?syntext-serna xml-stylesheet="xsl/iex.xsl"?><?syntext-serna xml-schema="iex.xsd"?><!DOCTYPE doc SYSTEM "iex.dtd" [
<!ENTITY entity-para "<para>With Serna, working with entities is easy. For example, this paragraph is an internal entity which is repeated twice. Try to do some operations in this paragraph (including element insertion,  selection, etc.).  Serna automatically replicates whatever you do in all entity references. &para-ent2;</para>">
<!ENTITY para-ent2 "And this is an entity within the entity. Note the context information on the status bar when you are within entity reference.">
<!ENTITY serna "Syntext Serna">]>
<doc>
  <title>&serna; Interactive Example</title>
  <sect>
    <title>Preface</title>
    <para>This document illustrates basic Serna functionality. This example consists of two important parts: this document itself, and its stylesheet. As you read this document you may try various editing use-cases. Look up the stylesheet to see how the most important use-cases are implemented and how stylesheet affects the ways in which you can edit the document. You can also use this example stylesheet as a base for developing your own.</para>
  </sect>
  <sect>
    <title>Basic editing</title>
    <sect>
      <title>Editing text</title>
      <para>Text editing is pretty much the same as in any other WYSIWYG editor. You can now try to insert, delete symbols, cut and paste selected text. The only notable exception is the automatic whitespace collapse. You cannot insert more than one consecutive blank. This is so because stylesheet prescribes to collapse whitespaces in <em>para</em> (where you are now).</para>
      <para>Try to edit section titles (or TOC titles) and see how changes are immediately mutually propagated. This is because XSLT stylesheet allows generation of multiple outputs from the single source (using multiple xsl:apply-templates etc.).</para>
      <pre>However, in this part of the document you are within &lt;pre&gt; element.
           You can insert 
                       as many spaces 
                                      as you wish,
                                                and use newlines freely. 


The only difference between &lt;pre&gt; and &lt;para&gt; is whitespace handling policy.</pre>
      <para>Note also that pressing ENTER by default splits current element, but in whitespace-preserve elements (like <em>pre</em>) real newline character is added.</para>
    </sect>
    <sect>
      <title>Always See The Context</title>
      <para>Context is very important for structured editing. Serna provides you with several hints regarding your whereabouts. Your current position is displayed on the status bar at the bottom of main window. Also, when you change position, <em>context tips</em> also appear for a few seconds:<dl>
          <li>yellow &quot;open-tag&quot; context tip suggests that you are in position <em>before</em> this element;</li>
          <li>yellow &quot;close-tag&quot; suggests that you are <em>after</em> this element;</li>
          <li>rectangular green tip indicates name of <em>enclosing</em> element;</li>
          <li>when you are between two tags, both yellow tips are displayed.</li>
        </dl>Corresponding element blocks are outlined with rectangles. To better understand this, try to navigate this document with cursor keys.</para>
      <para>Things go tricky with complex stylesheets because XSLT allows reordering data in arbitrary way. Sometimes you can see seemingly weird things like one shown below (item1 is first in the source document, and item2 is second):<example>
          <order>
            <item1>&lt;This is the first item, shown last&gt;</item1>
            <item2>&lt;This is the second item, shown first&gt;</item2>
          </order>
        </example>This is so because stylesheet reordered item elements on your screen, but context tips show <em>real</em> positions in the source document. Be careful with the power that dynamic XSLT gives you. Make sure your stylesheets provide editing convenience.</para>
    </sect>
    <sect>
      <title>Tag-less and Tag Mode</title>
      <para>Serna is designed to be a WYSIWYG editor, therefore for document editing you hardly ever need the shown tags (thanks to the context hints). However, there are some cases (e.g. complex structured selection) where tag mode can be useful. But note that even in tag mode Serna shows <em>transformed</em> document. It is better to understand tags as an indication of the <em>origin</em> of what you see on the screen. You can toggle tag mode from the tool-bar or by the leftmost button on the status bar.</para>
    </sect>
    <sect>
      <title>Choices</title>
      <para>Choices are special pseudo-elements which are automatically generated by XML Schema generator in situations where at least one element is necessary, but ambiguity exists. You can try the choice functionality if you go to the end of this paragraph until you see the closing &lt;para&gt; context tip, and try to insert &lt;sect&gt; element. &lt;sect&gt; requires at least two elements - one of them is &lt;title&gt;, which is ambiguous and therefore automatically generated. For the second element, you have a choice - it can be &lt;para&gt;, but may be &lt;sect&gt; (for sub-section) or &lt;pre&gt;. Go to the choice element and press CTRL-ENTER.</para>
      <para>Sometimes you may see multiple choice elements at once. This can be for two reasons: first, validator automatically generates required element trees of arbitrary depth, and there can be choice elements at the different levels of that tree. Second, XSLT replicates the result (e.g. by using multiple xsl:apply-templates).</para>
    </sect>
    <sect>
      <title>Generated text</title>
      <para>Some text in this document is generated by the stylesheet itself (with XSLT literal result or result of xsl:value-of, xsl:number, etc.). For example, words &quot;TABLE OF CONTENTS&quot; in the beginning of this document are generated, as so are section numbers. You cannot edit or select this text: it is immutable, a kind of &quot;decoration&quot;.</para>
    </sect>
    <sect>
      <title>Selection Operations</title>
      <para>Use selection for operations which require document range: cut, tag region, convert to entity, etc. To select some region, use mouse or cursor keys with SHIFT pressed down. You can try to select some text in this paragraph and press CTRL-T; choose &quot;em&quot; for element name.</para>
    </sect>
  </sect>
  <sect>
    <title>Using the TOC window</title>
    <para>You can navigate this document quickly by clicking &quot;title&quot; tags in the TOC window (on the left). You can open and close this window using menu <em>View-&gt;Toggle TOC</em> or by clicking TOC toggle button on the status-bar.</para>
  </sect>
  <sect>
    <title>Entity operations</title>
    <para>Entities are very powerful mechanism in XML, but they often undervalued because there are very few XML editors on the market which easily handle them. Entities are simplest way for data reuse. It is a good idea to define repeatable pieces of data in your document as entities. For example, version numbers or the full name of your company. External entity allow splitting large documents into pieces and collaborative work of many people on the different parts of the document.</para>
&entity-para;    <para>
      <em>This text is between the two entity references.</em>
    </para>
&entity-para;    <para>Working with external entities is just as easy. You can convert any selection into either internal or external entity. Serna opens and saves documents consisting from multiple external entities with no problems.</para>
  </sect>
  <sect>
    <title>On-the-fly Validation</title>
    <para>As we already mentioned, XML validator helps you by automatically generating required elements and choice elements, and by providing you with a lists of available elements and attributes for insertion. Validator also validates every thing you do, e.g. when you insert invalid element or text validator will produce an error message. For example, try to insert element &quot;blah&quot; here to see an error message. Click &quot;Undo&quot; to roll back, and error message will disappear: validator and undo/redo framework are friends.</para>
    <para>There is also &quot;Revalidate&quot; button on the tool-bar which revalidates whole document. Dynamically, validator does &quot;partial&quot; validation for the sake of performance, namely it validates only the result of your commands.</para>
    <para>XML Schema for this example comes with file <em>iex.xsd</em> generated from the <em>iex.dtd</em> with <em>Syntext dtd2xs</em> utility.</para>
  </sect>
  <sect>
    <title>More fun with XSLT</title>
    <para>Dynamic XSLT can sometimes be used for the tasks not directly relevant to document editing. You can see &quot;Syntext time-sheet&quot; as an example (it is a real time-sheet that Syntext employees fill every month). Below is a simpler example, a Fahrenheit-to-Celsius converter (try to change yellow number):<example>
        <fahrenheit>47.9</fahrenheit>
      </example>XSLT is not very well suited for such uses, but sometimes such tricks like that may be very useful.</para>
  </sect>
  <sect>
    <title>Example stylesheet composition</title>
    <para>Stylesheet for this document consists from several small files:<dl>
        <li><em>iex.xsl</em>: Main stylesheet file which includes other files and defines template for document element and document title. It also defines some parameters global to the stylesheet.</li>
        <li><em>page-setup.xsl</em>: Defines FO page sequence and contains parameters for various possible page-sizes. For your own stylesheet you may want to take this file &quot;as-is&quot;.</li>
        <li><em>toc.xsl</em>: Defines named template &quot;make.toc&quot; which creates the TOC on top of this document. It also contains TOC numbering and indentation logics.</li>
        <li><em>elems.xsl</em>: Contains templates for most common elements, like &lt;para&gt; and &lt;em&gt;.</li>
        <li><em>lists.xsl</em>: Contains implementation of ordered and unordered list (which you see right now).</li>
        <li><em>examples.xsl</em>: Contains templates for special examples, like Fahrenheit-to-Celsius converter above.</li>
      </dl>Although stylesheet is deliberately kept very simple, it does some things that &quot;real&quot; stylesheets do. For example, it uses multi-level numbering for sections and subsections, automatically calculates font size for nested section titles, draws bottom-line only for top-level section titles etc.</para>
  </sect>
  <sect>
    <title>Stylesheet and Schema caching</title>
    <para>Serna is smart enough to cache both compiled stylesheets and XML Schemas, so you don&apos;t waste your time parsing them over if you open another document of the similar type. When you debug your schema or stylesheet use <em>Tools-&gt;Reload Document</em>. This command will re-open the document, reloading the changed parts of Schema and/or stylesheet. This caching is fine-grained, i.e. if your stylesheet consists of several files and you&apos;ve changed only one of them, Serna will recompile only changed part of the stylesheet.</para>
    <para>In multi-document mode other opened documents (which are not explicitly reloaded) will continue to use &quot;old&quot; versions of Schema and/or stylesheet.</para>
  </sect>
  <sect>
    <title>Baseline support</title>
    <para>Example below illustrates baseline support. Try to change values in boxes - e.g. 120% to 3cm, and you will see your changes immediately reflected. This example also illustrates Serna dynamic FO property handling.<example>
        <baseline>= This text is not shifted =<baseline>baseline<baseline> sub </baseline><baseline> super </baseline><baseline> 120%</baseline><baseline> -15pt </baseline></baseline></baseline>
      </example></para>
  </sect>
  <sect>
    <title>Table support</title>
    <para>This section illustrates a simple table, which consists of &lt;row&gt;&apos;s which in turn contain &lt;cell&gt;&apos;s. Note that the column widths are not explicitly defined and calculated from the maximum number of cells in row. Serna actually supports much more complex table models, which use spans etc. (see table.xsl module in Docbook stylesheet as an example). You can insert rows and cells in various places.</para>
    <table>
      <row>
        <cell>Header 1</cell>
        <cell>Header 2</cell>
        <cell>Header 3</cell>
      </row>
      <row>
        <cell>Cell A</cell>
        <cell>Cell B</cell>
        <cell>Cell C</cell>
      </row>
      <row>
        <cell>
          <example>
            <order>
              <item1>&lt;Item 1&gt;</item1>
              <item2>&lt;Item 2&gt;</item2>
            </order>
          </example>
        </cell>
        <cell>
          <example>
            <fahrenheit>44</fahrenheit>
          </example>
        </cell>
        <cell>
          <example>
            <baseline>baseline<baseline>sub</baseline><baseline>super</baseline><baseline>102%</baseline><baseline>-15pt</baseline></baseline>
          </example>
        </cell>
      </row>
    </table>
    <para>A more complex table example follows. Table above is not really generated by the stylesheet - it is taken from external XSL-FO file, and rendered by Serna. </para>
    <para>
      <example>
        <complextable/>
      </example>
    </para>
  </sect>
  <sect>
    <title>Handling multiple data sources</title>
    <para>Complex table above also illustrates functionality of <em>document()</em> function of XSLT. Use of this function in the stylesheet allows arbitrary combination of external data sources which is presented in a &quot;joined view&quot; in Serna. This functionality is used e.g. by Docbook stylesheet for internationalization (predefined messages like &quot;Section&quot; or &quot;Note&quot; are stored in external language-specific files), and for resolving links to external documents.</para>
  </sect>
  <sect>
    <title>MathML viewing</title>
    <para>Serna can show in-line MathML (see below). However at this point you will need external MathML editor for editing the equations.<example>
        <math xmlns="" mode="display">
          <mrow>
            <mi>S</mi>
            <mo>=</mo>
            <mfrac>
              <mrow>
                <msqrt>
                  <mrow>
                    <msup>
                      <mrow>
                        <mi>I</mi>
                      </mrow>
                      <mrow>
                        <mn>2</mn>
                      </mrow>
                    </msup>
                    <mi>t</mi>
                  </mrow>
                </msqrt>
              </mrow>
              <mrow>
                <mi>k</mi>
              </mrow>
            </mfrac>
            <mo>⁢</mo>
            <mi>m</mi>
            <msup>
              <mrow>
                <mi>m</mi>
              </mrow>
              <mrow>
                <mn>2</mn>
              </mrow>
            </msup>
            <mo>,</mo>
            <mtext/>
            <mi mathvariant="normal">m</mi>
            <mi mathvariant="normal">i</mi>
            <mi mathvariant="normal">t</mi>
            <mi mathvariant="normal">s</mi>
            <mo>⁢</mo>
            <mtext/>
            <mi>t</mi>
            <mo>≤</mo>
            <mn>5</mn>
            <mi>s</mi>
            <mo>⁢</mo>
          </mrow>
        </math>
      </example></para>
  </sect>
</doc>

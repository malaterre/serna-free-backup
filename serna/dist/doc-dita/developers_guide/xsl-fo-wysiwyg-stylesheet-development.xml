<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd" []>
<topic xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="dg-xsl-fo-wysiwyg-notes">
  <title>Notes on XSL-FO WYSIWYG Stylesheet development</title>
  <body id="body">
    <section>
      <p>XSLT and XSL-FO flexibility allows for support of a variety of use-cases.  Stylesheets must be developed with stylesheet dynamics in mind. XSL stylesheet authors should follow notes below to create stylesheets which make document authoring easy and convenient.</p>
      <ul>
        <li>
          <b>Wrap element generating content into an FO</b>
          <p>For example, the following template generates representation that in some cases may not allow element content to be edited: </p>
          <codeblock>&lt;xsl:template match=&quot;member&quot;&gt;
  &lt;xsl:apply-templates/&gt;
&lt;/xsl:template&gt;</codeblock>
          <p>The correct template is:</p>
          <codeblock>&lt;xsl:template match=&quot;member&quot;&gt;
  &lt;fo:inline&gt;&lt;xsl:apply-templates/&gt;&lt;/fo:inline&gt;
&lt;/xsl:template&gt;</codeblock>
          <p>The idea is that Serna binds  a generated FO (here <codeph>fo:inline</codeph>) to the node matching the template (here <codeph>member</codeph>). Therefore Serna learns element name and cursor location from the area generated by  the template matched to the element. If  the template generated no areas, but some content, Serna cannot know exactly to which source element the generated content belongs.</p>
        </li>
        <li>
          <b>Call <codeph>xsl:apply-templates</codeph> from within a wrapping block</b>
          <p>For example, the result of the following template will be incorrectly displayed:</p>
          <codeblock>&lt;xsl:template match=&quot;section&quot;&gt;
   &lt;xsl:apply-templates select=&quot;title&quot;/&gt;
   &lt;fo:block&gt;
      &lt;xsl:apply-templates select=&quot;*&quot;/&gt;
   &lt;/fo:block&gt;
&lt;/xsl:template&gt;
</codeblock>
          <p>Serna will render <codeph>title</codeph> as the child of <codeph>section</codeph>&apos;s parent, but not as a child of its<codeph> section</codeph>. The correct way is:</p>
          <codeblock>&lt;xsl:template match=&quot;section&quot;&gt;
   &lt;fo:block&gt;
      &lt;xsl:apply-templates select=&quot;title&quot;/&gt;
      &lt;xsl:apply-templates select=&quot;*&quot;/&gt;
   &lt;/fo:block&gt;
&lt;/xsl:template&gt;
</codeblock>
          <p>Serna will understand that <codeph>title</codeph> belongs to <codeph>section</codeph> because <codeph>title</codeph> will be inside <codeph>fo:block</codeph> bound to <codeph>section</codeph> &apos;s template.</p>
        </li>
        <li>
          <b>If template generates several blocks for the element then wrap them all to one block</b>
          <p>The following will be represented as if there are two <codeph>important</codeph> elements, though there is one that generated two blocks:</p>
          <codeblock>&lt;xsl:template match=&quot;important&quot;&gt;
   &lt;fo:block start-indent=&quot;0.25in&quot;&quot;&gt;
      &lt;xsl:text&gt;IMPORTANT: &lt;/xsl:text&gt;
      &lt;xsl:apply-templates select=&quot;title&quot;/&gt;
   &lt;/fo:block&gt;
   &lt;fo:block&gt;
      &lt;xsl:apply-templates select=&quot;*[local-name(.) != &apos;title&apos;]&quot;/&gt;
   &lt;/fo:block&gt;
&lt;/xsl:template&gt;</codeblock>
          <p>The correct way is:</p>
          <codeblock>&lt;xsl:template match=&quot;important&quot;&gt;
  &lt;fo:block&gt;
    &lt;fo:block start-indent=&quot;0.25in&quot;&quot;&gt;
      &lt;xsl:text&gt;IMPORTANT: &lt;/xsl:text&gt;
      &lt;xsl:apply-templates select=&quot;title&quot;/&gt;
    &lt;/fo:block&gt;
    &lt;fo:block&gt;
      &lt;xsl:apply-templates select=&quot;*[local-name(.) != &apos;title&apos;]&quot;/&gt;
    &lt;/fo:block&gt;
 &lt;/fo:block&gt;
&lt;/xsl:template&gt;</codeblock>
        </li>
        <li>
          <b>Avoid confusion from empty FOs</b>
          <p>Serna represents empty FOs as empty elements. Therefore in situations when  the element may have empty content make sure that empty FOs will be not generated. The following representation will confuse the user if <codeph>title</codeph> is not required:</p>
          <codeblock>&lt;xsl:template name=&quot;titled-block&quot;&gt;
   &lt;fo:block start-indent=&quot;0.25in&quot;&gt;
      &lt;xsl:apply-templates select=&quot;title&quot;/&gt;
   &lt;/fo:block&gt;
   &lt;fo:block&gt;
      &lt;xsl:apply-templates select=&quot;*[local-name(.) != &apos;title&apos;]&quot;/&gt;
   &lt;/fo:block&gt;
&lt;/xsl:template&gt;
</codeblock>
          <p>The correct way is:</p>
          <codeblock>&lt;xsl:template name=&quot;titled-block&quot;&gt;
   &lt;xsl:if test=&quot;title&quot;&gt;
       &lt;fo:block start-indent=&quot;0.25in&quot;&gt;
           &lt;xsl:apply-templates select=&quot;title&quot;/&gt;
        &lt;/fo:block&gt;
   &lt;/xsl:if&gt;
   &lt;fo:block&gt;
        &lt;xsl:apply-templates select=&quot;*[local-name(.) != &apos;title&apos;]&quot;/&gt;
    &lt;/fo:block&gt;
&lt;/xsl:template&gt;</codeblock>
        </li>
        <li>
          <b>Generate text only when element content is not empty</b>
          <p>Sometimes it is convenient to generate some text when representing an element. But make sure you generate text when element is not empty, this will be  more convenient for  the user. For example:</p>
          <codeblock>&lt;xsl:template match=&quot;seealso&quot;&gt;
   &lt;fo:inline&gt;
      &lt;xsl:text&gt;See also:&lt;/xsl:text&gt;
      &lt;xsl:apply-templates/&gt;
   &lt;/fo:inline&gt;
&lt;/xsl:template&gt;</codeblock>
          <p>This will generate text <q>See also:</q> when the user inserted an empty <codeph>seealso</codeph> tag, and it will be a little tiresome for the user to find  the position inside <codeph>seealso</codeph> for inserting elements. A better approach is:</p>
          <codeblock>&lt;xsl:template match=&quot;seealso&quot;&gt;
   &lt;fo:inline&gt;
      &lt;xsl:if test=&quot;text()&quot;&gt;
         &lt;xsl:text&gt;See also:&lt;/xsl:text&gt;
      &lt;/xsl:if&gt;
      &lt;xsl:apply-templates/&gt;
   &lt;/fo:inline&gt;
&lt;/xsl:template&gt;</codeblock>
          <p>Then when the user inserts  an empty <codeph>seealso</codeph> he will see an empty tag, and the text <q>See also:</q> will appear when he inserts  the first symbol.</p>
        </li>
      </ul>
    </section>
  </body>
</topic>

<?xml version="1.0" encoding="UTF-8"?>
<!--
  Extensible HTML version 1.0 Transitional DTD
  
  This is the same as HTML 4 Transitional except for
  changes due to the differences between XML and SGML.
  
  Namespace = http://www.w3.org/1999/xhtml
  
  For further information, see: http://www.w3.org/TR/xhtml1
  
  Copyright (c) 1998-2002 W3C (MIT, INRIA, Keio),
  All Rights Reserved. 
  
  This DTD module is identified by the PUBLIC and SYSTEM identifiers:
  
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  SYSTEM "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"
  
  $Revision: 1.1 $
  $Date: 2003/12/03 12:38:08 $
  
-->
<!-- ================ Character mnemonic entities ========================= -->
<!-- ================== Imported Names ==================================== -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml">
  <xs:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="xml.xsd"/>
  <xs:simpleType name="ContentType">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- media type, as per [RFC2045] -->
  <xs:simpleType name="ContentTypes">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- comma-separated list of media types, as per [RFC2045] -->
  <xs:simpleType name="Charset">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- a character encoding, as per [RFC2045] -->
  <xs:simpleType name="Charsets">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- a space separated list of character encodings, as per [RFC2045] -->
  <xs:simpleType name="LanguageCode">
    <xs:restriction base="xs:NMTOKEN"/>
  </xs:simpleType>
  <!-- a language code, as per [RFC3066] -->
  <xs:simpleType name="Character">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- a single character, as per section 2.2 of [XML] -->
  <xs:simpleType name="Number">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- one or more digits -->
  <xs:simpleType name="LinkTypes">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- space-separated list of link types -->
  <xs:simpleType name="MediaDesc">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- single or comma-separated list of media descriptors -->
  <xs:simpleType name="URI">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- a Uniform Resource Identifier, see [RFC2396] -->
  <xs:simpleType name="UriList">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- a space separated list of Uniform Resource Identifiers -->
  <xs:simpleType name="Datetime">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- date and time information. ISO date format -->
  <xs:simpleType name="Script">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- script expression -->
  <xs:simpleType name="StyleSheet">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- style sheet data -->
  <xs:simpleType name="Text">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- used for titles etc. -->
  <xs:simpleType name="FrameTarget">
    <xs:restriction base="xs:NMTOKEN"/>
  </xs:simpleType>
  <!-- render in this frame -->
  <xs:simpleType name="Length">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- nn for pixels or nn% for percentage length -->
  <xs:simpleType name="MultiLength">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- pixel, percentage, or relative -->
  <xs:simpleType name="Pixels">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- integer representing length in pixels -->
  <!-- these are used for image maps -->
  <xs:simpleType name="Shape">
    <xs:restriction base="xs:token">
      <xs:enumeration value="rect"/>
      <xs:enumeration value="circle"/>
      <xs:enumeration value="poly"/>
      <xs:enumeration value="default"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="Coords">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- comma separated list of lengths -->
  <!-- used for object, applet, img, input and iframe -->
  <xs:simpleType name="ImgAlign">
    <xs:restriction base="xs:token">
      <xs:enumeration value="top"/>
      <xs:enumeration value="middle"/>
      <xs:enumeration value="bottom"/>
      <xs:enumeration value="left"/>
      <xs:enumeration value="right"/>
    </xs:restriction>
  </xs:simpleType>
  <!-- a color using sRGB: #RRGGBB as Hex values -->
  <xs:simpleType name="Color">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!--
    There are also 16 widely known color names with their sRGB values:
    
    Black  = #000000    Green  = #008000
    Silver = #C0C0C0    Lime   = #00FF00
    Gray   = #808080    Olive  = #808000
    White  = #FFFFFF    Yellow = #FFFF00
    Maroon = #800000    Navy   = #000080
    Red    = #FF0000    Blue   = #0000FF
    Purple = #800080    Teal   = #008080
    Fuchsia= #FF00FF    Aqua   = #00FFFF
  -->
  <!-- =================== Generic Attributes =============================== -->
  <!--
    core attributes common to most elements
    id       document-wide unique id
    class    space separated list of classes
    style    associated style info
    title    advisory title/amplification
  -->
  <xs:attributeGroup name="coreattrs">
    <xs:attribute name="id" type="xs:ID"/>
    <xs:attribute name="class"/>
    <xs:attribute name="style" type="xhtml:StyleSheet"/>
    <xs:attribute name="title" type="xhtml:Text"/>
  </xs:attributeGroup>
  <!--
    internationalization attributes
    lang        language code (backwards compatible)
    xml:lang    language code (as per XML 1.0 spec)
    dir         direction for weak/neutral text
  -->
  <xs:attributeGroup name="i18n">
    <xs:attribute name="lang" type="xhtml:LanguageCode"/>
    <xs:attribute ref="xml:lang"/>
    <xs:attribute name="dir">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="ltr"/>
          <xs:enumeration value="rtl"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    attributes for common UI events
    onclick     a pointer button was clicked
    ondblclick  a pointer button was double clicked
    onmousedown a pointer button was pressed down
    onmouseup   a pointer button was released
    onmousemove a pointer was moved onto the element
    onmouseout  a pointer was moved away from the element
    onkeypress  a key was pressed and released
    onkeydown   a key was pressed down
    onkeyup     a key was released
  -->
  <xs:attributeGroup name="events">
    <xs:attribute name="onclick" type="xhtml:Script"/>
    <xs:attribute name="ondblclick" type="xhtml:Script"/>
    <xs:attribute name="onmousedown" type="xhtml:Script"/>
    <xs:attribute name="onmouseup" type="xhtml:Script"/>
    <xs:attribute name="onmouseover" type="xhtml:Script"/>
    <xs:attribute name="onmousemove" type="xhtml:Script"/>
    <xs:attribute name="onmouseout" type="xhtml:Script"/>
    <xs:attribute name="onkeypress" type="xhtml:Script"/>
    <xs:attribute name="onkeydown" type="xhtml:Script"/>
    <xs:attribute name="onkeyup" type="xhtml:Script"/>
  </xs:attributeGroup>
  <!--
    attributes for elements that can get the focus
    accesskey   accessibility key character
    tabindex    position in tabbing order
    onfocus     the element got the focus
    onblur      the element lost the focus
  -->
  <xs:attributeGroup name="focus">
    <xs:attribute name="accesskey" type="xhtml:Character"/>
    <xs:attribute name="tabindex" type="xhtml:Number"/>
    <xs:attribute name="onfocus" type="xhtml:Script"/>
    <xs:attribute name="onblur" type="xhtml:Script"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="attrs">
    <xs:attributeGroup ref="xhtml:coreattrs"/>
    <xs:attributeGroup ref="xhtml:i18n"/>
    <xs:attributeGroup ref="xhtml:events"/>
  </xs:attributeGroup>
  <!--
    text alignment for p, div, h1-h6. The default is
    align="left" for ltr headings, "right" for rtl
  -->
  <xs:attributeGroup name="TextAlign">
    <xs:attribute name="align">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="left"/>
          <xs:enumeration value="center"/>
          <xs:enumeration value="right"/>
          <xs:enumeration value="justify"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!-- =================== Text Elements ==================================== -->
  <xs:group name="special.extra">
    <xs:choice>
      <xs:element ref="xhtml:object"/>
      <xs:element ref="xhtml:applet"/>
      <xs:element ref="xhtml:img"/>
      <xs:element ref="xhtml:map"/>
      <xs:element ref="xhtml:iframe"/>
    </xs:choice>
  </xs:group>
  <xs:group name="special.basic">
    <xs:choice>
      <xs:element ref="xhtml:br"/>
      <xs:element ref="xhtml:span"/>
      <xs:element ref="xhtml:bdo"/>
    </xs:choice>
  </xs:group>
  <xs:group name="special">
    <xs:choice>
      <xs:group ref="xhtml:special.basic"/>
      <xs:group ref="xhtml:special.extra"/>
    </xs:choice>
  </xs:group>
  <xs:group name="fontstyle.extra">
    <xs:choice>
      <xs:element ref="xhtml:big"/>
      <xs:element ref="xhtml:small"/>
      <xs:element ref="xhtml:font"/>
      <xs:element ref="xhtml:basefont"/>
    </xs:choice>
  </xs:group>
  <xs:group name="fontstyle.basic">
    <xs:choice>
      <xs:element ref="xhtml:tt"/>
      <xs:element ref="xhtml:i"/>
      <xs:element ref="xhtml:b"/>
      <xs:element ref="xhtml:u"/>
      <xs:element ref="xhtml:s"/>
      <xs:element ref="xhtml:strike"/>
    </xs:choice>
  </xs:group>
  <xs:group name="fontstyle">
    <xs:choice>
      <xs:group ref="xhtml:fontstyle.basic"/>
      <xs:group ref="xhtml:fontstyle.extra"/>
    </xs:choice>
  </xs:group>
  <xs:group name="phrase.extra">
    <xs:choice>
      <xs:element ref="xhtml:sub"/>
      <xs:element ref="xhtml:sup"/>
    </xs:choice>
  </xs:group>
  <xs:group name="phrase.basic">
    <xs:choice>
      <xs:element ref="xhtml:em"/>
      <xs:element ref="xhtml:strong"/>
      <xs:element ref="xhtml:dfn"/>
      <xs:element ref="xhtml:code"/>
      <xs:element ref="xhtml:q"/>
      <xs:element ref="xhtml:samp"/>
      <xs:element ref="xhtml:kbd"/>
      <xs:element ref="xhtml:var"/>
      <xs:element ref="xhtml:cite"/>
      <xs:element ref="xhtml:abbr"/>
      <xs:element ref="xhtml:acronym"/>
    </xs:choice>
  </xs:group>
  <xs:group name="phrase">
    <xs:choice>
      <xs:group ref="xhtml:phrase.basic"/>
      <xs:group ref="xhtml:phrase.extra"/>
    </xs:choice>
  </xs:group>
  <xs:group name="inline.forms">
    <xs:choice>
      <xs:element ref="xhtml:input"/>
      <xs:element ref="xhtml:select"/>
      <xs:element ref="xhtml:textarea"/>
      <xs:element ref="xhtml:label"/>
      <xs:element ref="xhtml:button"/>
    </xs:choice>
  </xs:group>
  <!-- these can occur at block or inline level -->
  <xs:group name="misc.inline">
    <xs:choice>
      <xs:element ref="xhtml:ins"/>
      <xs:element ref="xhtml:del"/>
      <xs:element ref="xhtml:script"/>
    </xs:choice>
  </xs:group>
  <!-- these can only occur at block level -->
  <xs:group name="misc">
    <xs:choice>
      <xs:element ref="xhtml:noscript"/>
      <xs:group ref="xhtml:misc.inline"/>
    </xs:choice>
  </xs:group>
  <xs:group name="inline">
    <xs:choice>
      <xs:element ref="xhtml:a"/>
      <xs:group ref="xhtml:special"/>
      <xs:group ref="xhtml:fontstyle"/>
      <xs:group ref="xhtml:phrase"/>
      <xs:group ref="xhtml:inline.forms"/>
    </xs:choice>
  </xs:group>
  <!-- %Inline; covers inline or "text-level" elements -->
  <xs:complexType name="Inline" mixed="true">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:group ref="xhtml:inline"/>
      <xs:group ref="xhtml:misc.inline"/>
    </xs:choice>
  </xs:complexType>
  <!-- ================== Block level elements ============================== -->
  <xs:group name="heading">
    <xs:choice>
      <xs:element ref="xhtml:h1"/>
      <xs:element ref="xhtml:h2"/>
      <xs:element ref="xhtml:h3"/>
      <xs:element ref="xhtml:h4"/>
      <xs:element ref="xhtml:h5"/>
      <xs:element ref="xhtml:h6"/>
    </xs:choice>
  </xs:group>
  <xs:group name="lists">
    <xs:choice>
      <xs:element ref="xhtml:ul"/>
      <xs:element ref="xhtml:ol"/>
      <xs:element ref="xhtml:dl"/>
      <xs:element ref="xhtml:menu"/>
      <xs:element ref="xhtml:dir"/>
    </xs:choice>
  </xs:group>
  <xs:group name="blocktext">
    <xs:choice>
      <xs:element ref="xhtml:pre"/>
      <xs:element ref="xhtml:hr"/>
      <xs:element ref="xhtml:blockquote"/>
      <xs:element ref="xhtml:address"/>
      <xs:element ref="xhtml:center"/>
      <xs:element ref="xhtml:noframes"/>
    </xs:choice>
  </xs:group>
  <xs:group name="block">
    <xs:choice>
      <xs:element ref="xhtml:p"/>
      <xs:group ref="xhtml:heading"/>
      <xs:element ref="xhtml:div"/>
      <xs:group ref="xhtml:lists"/>
      <xs:group ref="xhtml:blocktext"/>
      <xs:element ref="xhtml:isindex"/>
      <xs:element ref="xhtml:fieldset"/>
      <xs:element ref="xhtml:table"/>
    </xs:choice>
  </xs:group>
  <!-- %Flow; mixes block and inline and is used for list items etc. -->
  <xs:complexType name="Flow" mixed="true">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:group ref="xhtml:block"/>
      <xs:element ref="xhtml:form"/>
      <xs:group ref="xhtml:inline"/>
      <xs:group ref="xhtml:misc"/>
    </xs:choice>
  </xs:complexType>
  <!-- ================== Content models for exclusions ===================== -->
  <!-- a elements use %Inline; excluding a -->
  <xs:complexType name="a.content" mixed="true">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:group ref="xhtml:special"/>
      <xs:group ref="xhtml:fontstyle"/>
      <xs:group ref="xhtml:phrase"/>
      <xs:group ref="xhtml:inline.forms"/>
      <xs:group ref="xhtml:misc.inline"/>
    </xs:choice>
  </xs:complexType>
  <!--
    pre uses %Inline excluding img, object, applet, big, small,
    font, or basefont
  -->
  <xs:complexType name="pre.content" mixed="true">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="xhtml:a"/>
      <xs:group ref="xhtml:special.basic"/>
      <xs:group ref="xhtml:fontstyle.basic"/>
      <xs:group ref="xhtml:phrase.basic"/>
      <xs:group ref="xhtml:inline.forms"/>
      <xs:group ref="xhtml:misc.inline"/>
    </xs:choice>
  </xs:complexType>
  <!-- form uses %Flow; excluding form -->
  <xs:complexType name="form.content" mixed="true">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:group ref="xhtml:block"/>
      <xs:group ref="xhtml:inline"/>
      <xs:group ref="xhtml:misc"/>
    </xs:choice>
  </xs:complexType>
  <!-- button uses %Flow; but excludes a, form, form controls, iframe -->
  <xs:complexType name="button.content" mixed="true">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="xhtml:p"/>
      <xs:group ref="xhtml:heading"/>
      <xs:element ref="xhtml:div"/>
      <xs:group ref="xhtml:lists"/>
      <xs:group ref="xhtml:blocktext"/>
      <xs:element ref="xhtml:table"/>
      <xs:element ref="xhtml:br"/>
      <xs:element ref="xhtml:span"/>
      <xs:element ref="xhtml:bdo"/>
      <xs:element ref="xhtml:object"/>
      <xs:element ref="xhtml:applet"/>
      <xs:element ref="xhtml:img"/>
      <xs:element ref="xhtml:map"/>
      <xs:group ref="xhtml:fontstyle"/>
      <xs:group ref="xhtml:phrase"/>
      <xs:group ref="xhtml:misc"/>
    </xs:choice>
  </xs:complexType>
  <!-- ================ Document Structure ================================== -->
  <!-- the namespace URI designates the document profile -->
  <xs:element name="html">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="xhtml:head"/>
        <xs:element ref="xhtml:body"/>
      </xs:sequence>
      <xs:attributeGroup ref="xhtml:i18n"/>
      <xs:attribute name="id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <!-- ================ Document Head ======================================= -->
  <xs:group name="head.misc">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="xhtml:script"/>
        <xs:element ref="xhtml:style"/>
        <xs:element ref="xhtml:meta"/>
        <xs:element ref="xhtml:link"/>
        <xs:element ref="xhtml:object"/>
        <xs:element ref="xhtml:isindex"/>
      </xs:choice>
    </xs:sequence>
  </xs:group>
  <!--
    content model is %head.misc; combined with a single
    title and an optional base element in any order
  -->
  <xs:element name="head">
    <xs:complexType>
      <xs:sequence>
        <xs:group ref="xhtml:head.misc"/>
        <xs:choice>
          <xs:sequence>
            <xs:element ref="xhtml:title"/>
            <xs:group ref="xhtml:head.misc"/>
            <xs:sequence minOccurs="0">
              <xs:element ref="xhtml:base"/>
              <xs:group ref="xhtml:head.misc"/>
            </xs:sequence>
          </xs:sequence>
          <xs:sequence>
            <xs:element ref="xhtml:base"/>
            <xs:group ref="xhtml:head.misc"/>
            <xs:sequence>
              <xs:element ref="xhtml:title"/>
              <xs:group ref="xhtml:head.misc"/>
            </xs:sequence>
          </xs:sequence>
        </xs:choice>
      </xs:sequence>
      <xs:attributeGroup ref="xhtml:i18n"/>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attribute name="profile" type="xhtml:URI"/>
    </xs:complexType>
  </xs:element>
  <!--
    The title element is not considered part of the flow of text.
    It should be displayed, for example as the page header or
    window title. Exactly one title is required per document.
  -->
  <xs:element name="title">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="xhtml:i18n"/>
      <xs:attribute name="id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <!-- document base URI -->
  <xs:element name="base">
    <xs:complexType>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attribute name="href" type="xhtml:URI"/>
      <xs:attribute name="target" type="xhtml:FrameTarget"/>
    </xs:complexType>
  </xs:element>
  <!-- generic metainformation -->
  <xs:element name="meta">
    <xs:complexType>
      <xs:attributeGroup ref="xhtml:i18n"/>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attribute name="http-equiv"/>
      <xs:attribute name="name"/>
      <xs:attribute name="content" use="required"/>
      <xs:attribute name="scheme"/>
    </xs:complexType>
  </xs:element>
  <!--
    Relationship values can be used in principle:
    
     a) for document specific toolbars/menus when used
        with the link element in document head e.g.
          start, contents, previous, next, index, end, help
     b) to link to a separate style sheet (rel="stylesheet")
     c) to make a link to a script (rel="script")
     d) by stylesheets to control how collections of
        html nodes are rendered into printed documents
     e) to make a link to a printable version of this document
        e.g. a PostScript or PDF version (rel="alternate" media="print")
  -->
  <xs:element name="link">
    <xs:complexType>
      <xs:attributeGroup ref="xhtml:attrs"/>
      <xs:attribute name="charset" type="xhtml:Charset"/>
      <xs:attribute name="href" type="xhtml:URI"/>
      <xs:attribute name="hreflang" type="xhtml:LanguageCode"/>
      <xs:attribute name="type" type="xhtml:ContentType"/>
      <xs:attribute name="rel" type="xhtml:LinkTypes"/>
      <xs:attribute name="rev" type="xhtml:LinkTypes"/>
      <xs:attribute name="media" type="xhtml:MediaDesc"/>
      <xs:attribute name="target" type="xhtml:FrameTarget"/>
    </xs:complexType>
  </xs:element>
  <!-- style info, which may include CDATA sections -->
  <xs:element name="style">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="xhtml:i18n"/>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attribute name="type" use="required" type="xhtml:ContentType"/>
      <xs:attribute name="media" type="xhtml:MediaDesc"/>
      <xs:attribute name="title" type="xhtml:Text"/>
      <xs:attribute ref="xml:space" default="preserve"/>
    </xs:complexType>
  </xs:element>
  <!-- script statements, which may include CDATA sections -->
  <xs:element name="script">
    <xs:complexType mixed="true">
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attribute name="charset" type="xhtml:Charset"/>
      <xs:attribute name="type" use="required" type="xhtml:ContentType"/>
      <xs:attribute name="language"/>
      <xs:attribute name="src" type="xhtml:URI"/>
      <xs:attribute name="defer">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="defer"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute ref="xml:space" default="preserve"/>
    </xs:complexType>
  </xs:element>
  <!-- alternate content container for non script-based rendering -->
  <xs:element name="noscript">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Flow">
          <xs:attributeGroup ref="xhtml:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- ======================= Frames ======================================= -->
  <!-- inline subwindow -->
  <xs:element name="iframe">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Flow">
          <xs:attributeGroup ref="xhtml:coreattrs"/>
          <xs:attribute name="longdesc" type="xhtml:URI"/>
          <xs:attribute name="name" type="xs:NMTOKEN"/>
          <xs:attribute name="src" type="xhtml:URI"/>
          <xs:attribute name="frameborder" default="1">
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="1"/>
                <xs:enumeration value="0"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name="marginwidth" type="xhtml:Pixels"/>
          <xs:attribute name="marginheight" type="xhtml:Pixels"/>
          <xs:attribute name="scrolling" default="auto">
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="yes"/>
                <xs:enumeration value="no"/>
                <xs:enumeration value="auto"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name="align" type="xhtml:ImgAlign"/>
          <xs:attribute name="height" type="xhtml:Length"/>
          <xs:attribute name="width" type="xhtml:Length"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- alternate content container for non frame-based rendering -->
  <xs:element name="noframes">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Flow">
          <xs:attributeGroup ref="xhtml:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- =================== Document Body ==================================== -->
  <xs:element name="body">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Flow">
          <xs:attributeGroup ref="xhtml:attrs"/>
          <xs:attribute name="onload" type="xhtml:Script"/>
          <xs:attribute name="onunload" type="xhtml:Script"/>
          <xs:attribute name="background" type="xhtml:URI"/>
          <xs:attribute name="bgcolor" type="xhtml:Color"/>
          <xs:attribute name="text" type="xhtml:Color"/>
          <xs:attribute name="link" type="xhtml:Color"/>
          <xs:attribute name="vlink" type="xhtml:Color"/>
          <xs:attribute name="alink" type="xhtml:Color"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="div">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Flow">
          <xs:attributeGroup ref="xhtml:attrs"/>
          <xs:attributeGroup ref="xhtml:TextAlign"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- generic language/style container -->
  <!-- =================== Paragraphs ======================================= -->
  <xs:element name="p">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
          <xs:attributeGroup ref="xhtml:TextAlign"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- =================== Headings ========================================= -->
  <!--
    There are six levels of headings from h1 (the most important)
    to h6 (the least important).
  -->
  <xs:element name="h1">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
          <xs:attributeGroup ref="xhtml:TextAlign"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="h2">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
          <xs:attributeGroup ref="xhtml:TextAlign"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="h3">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
          <xs:attributeGroup ref="xhtml:TextAlign"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="h4">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
          <xs:attributeGroup ref="xhtml:TextAlign"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="h5">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
          <xs:attributeGroup ref="xhtml:TextAlign"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="h6">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
          <xs:attributeGroup ref="xhtml:TextAlign"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- =================== Lists ============================================ -->
  <!-- Unordered list bullet styles -->
  <xs:simpleType name="ULStyle">
    <xs:restriction base="xs:token">
      <xs:enumeration value="disc"/>
      <xs:enumeration value="square"/>
      <xs:enumeration value="circle"/>
    </xs:restriction>
  </xs:simpleType>
  <!-- Unordered list -->
  <xs:element name="ul">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="xhtml:li"/>
      </xs:sequence>
      <xs:attributeGroup ref="xhtml:attrs"/>
      <xs:attribute name="type" type="xhtml:ULStyle"/>
      <xs:attribute name="compact">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="compact"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <!--
    Ordered list numbering style
    
    1   arabic numbers      1, 2, 3, ...
    a   lower alpha         a, b, c, ...
    A   upper alpha         A, B, C, ...
    i   lower roman         i, ii, iii, ...
    I   upper roman         I, II, III, ...
    
    The style is applied to the sequence number which by default
    is reset to 1 for the first list item in an ordered list.
  -->
  <xs:simpleType name="OLStyle">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- Ordered (numbered) list -->
  <xs:element name="ol">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="xhtml:li"/>
      </xs:sequence>
      <xs:attributeGroup ref="xhtml:attrs"/>
      <xs:attribute name="type" type="xhtml:OLStyle"/>
      <xs:attribute name="compact">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="compact"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="start" type="xhtml:Number"/>
    </xs:complexType>
  </xs:element>
  <!-- single column list (DEPRECATED) -->
  <xs:element name="menu">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="xhtml:li"/>
      </xs:sequence>
      <xs:attributeGroup ref="xhtml:attrs"/>
      <xs:attribute name="compact">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="compact"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <!-- multiple column list (DEPRECATED) -->
  <xs:element name="dir">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="xhtml:li"/>
      </xs:sequence>
      <xs:attributeGroup ref="xhtml:attrs"/>
      <xs:attribute name="compact">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="compact"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <!-- LIStyle is constrained to: "(%ULStyle;|%OLStyle;)" -->
  <xs:simpleType name="LIStyle">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- list item -->
  <xs:element name="li">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Flow">
          <xs:attributeGroup ref="xhtml:attrs"/>
          <xs:attribute name="type" type="xhtml:LIStyle"/>
          <xs:attribute name="value" type="xhtml:Number"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- definition lists - dt for term, dd for its definition -->
  <xs:element name="dl">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element ref="xhtml:dt"/>
        <xs:element ref="xhtml:dd"/>
      </xs:choice>
      <xs:attributeGroup ref="xhtml:attrs"/>
      <xs:attribute name="compact">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="compact"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="dt">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="dd">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Flow">
          <xs:attributeGroup ref="xhtml:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- =================== Address ========================================== -->
  <!-- information on author -->
  <xs:element name="address">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="xhtml:inline"/>
        <xs:group ref="xhtml:misc.inline"/>
        <xs:element ref="xhtml:p"/>
      </xs:choice>
      <xs:attributeGroup ref="xhtml:attrs"/>
    </xs:complexType>
  </xs:element>
  <!-- =================== Horizontal Rule ================================== -->
  <xs:element name="hr">
    <xs:complexType>
      <xs:attributeGroup ref="xhtml:attrs"/>
      <xs:attribute name="align">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="left"/>
            <xs:enumeration value="center"/>
            <xs:enumeration value="right"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="noshade">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="noshade"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="size" type="xhtml:Pixels"/>
      <xs:attribute name="width" type="xhtml:Length"/>
    </xs:complexType>
  </xs:element>
  <!-- =================== Preformatted Text ================================ -->
  <!--
    content is %Inline; excluding 
    "img|object|applet|big|small|sub|sup|font|basefont"
  -->
  <xs:element name="pre">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:pre.content">
          <xs:attributeGroup ref="xhtml:attrs"/>
          <xs:attribute name="width" type="xhtml:Number"/>
          <xs:attribute ref="xml:space" default="preserve"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- =================== Block-like Quotes ================================ -->
  <xs:element name="blockquote">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Flow">
          <xs:attributeGroup ref="xhtml:attrs"/>
          <xs:attribute name="cite" type="xhtml:URI"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- =================== Text alignment =================================== -->
  <!-- center content -->
  <xs:element name="center">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Flow">
          <xs:attributeGroup ref="xhtml:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- =================== Inserted/Deleted Text ============================ -->
  <!--
    ins/del are allowed in block and inline content, but its
    inappropriate to include block content within an ins element
    occurring in inline content.
  -->
  <xs:element name="ins">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Flow">
          <xs:attributeGroup ref="xhtml:attrs"/>
          <xs:attribute name="cite" type="xhtml:URI"/>
          <xs:attribute name="datetime" type="xhtml:Datetime"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="del">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Flow">
          <xs:attributeGroup ref="xhtml:attrs"/>
          <xs:attribute name="cite" type="xhtml:URI"/>
          <xs:attribute name="datetime" type="xhtml:Datetime"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- ================== The Anchor Element ================================ -->
  <!-- content is %Inline; except that anchors shouldn't be nested -->
  <xs:element name="a">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:a.content">
          <xs:attributeGroup ref="xhtml:attrs"/>
          <xs:attributeGroup ref="xhtml:focus"/>
          <xs:attribute name="charset" type="xhtml:Charset"/>
          <xs:attribute name="type" type="xhtml:ContentType"/>
          <xs:attribute name="name" type="xs:NMTOKEN"/>
          <xs:attribute name="href" type="xhtml:URI"/>
          <xs:attribute name="hreflang" type="xhtml:LanguageCode"/>
          <xs:attribute name="rel" type="xhtml:LinkTypes"/>
          <xs:attribute name="rev" type="xhtml:LinkTypes"/>
          <xs:attribute name="shape" default="rect" type="xhtml:Shape"/>
          <xs:attribute name="coords" type="xhtml:Coords"/>
          <xs:attribute name="target" type="xhtml:FrameTarget"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- ===================== Inline Elements ================================ -->
  <xs:element name="span">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- generic language/style container -->
  <xs:element name="bdo">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:coreattrs"/>
          <xs:attributeGroup ref="xhtml:events"/>
          <xs:attribute name="lang" type="xhtml:LanguageCode"/>
          <xs:attribute ref="xml:lang"/>
          <xs:attribute name="dir" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="ltr"/>
                <xs:enumeration value="rtl"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- I18N BiDi over-ride -->
  <xs:element name="br">
    <xs:complexType>
      <xs:attributeGroup ref="xhtml:coreattrs"/>
      <xs:attribute name="clear" default="none">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="left"/>
            <xs:enumeration value="all"/>
            <xs:enumeration value="right"/>
            <xs:enumeration value="none"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <!-- forced line break -->
  <xs:element name="em">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- emphasis -->
  <xs:element name="strong">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- strong emphasis -->
  <xs:element name="dfn">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- definitional -->
  <xs:element name="code">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- program code -->
  <xs:element name="samp">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- sample -->
  <xs:element name="kbd">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- something user would type -->
  <xs:element name="var">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- variable -->
  <xs:element name="cite">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- citation -->
  <xs:element name="abbr">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- abbreviation -->
  <xs:element name="acronym">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- acronym -->
  <xs:element name="q">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
          <xs:attribute name="cite" type="xhtml:URI"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- inlined quote -->
  <xs:element name="sub">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- subscript -->
  <xs:element name="sup">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- superscript -->
  <xs:element name="tt">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- fixed pitch font -->
  <xs:element name="i">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- italic font -->
  <xs:element name="b">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- bold font -->
  <xs:element name="big">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- bigger font -->
  <xs:element name="small">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- smaller font -->
  <xs:element name="u">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- underline -->
  <xs:element name="s">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- strike-through -->
  <xs:element name="strike">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- strike-through -->
  <xs:element name="basefont">
    <xs:complexType>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attribute name="size" use="required"/>
      <xs:attribute name="color" type="xhtml:Color"/>
      <xs:attribute name="face"/>
    </xs:complexType>
  </xs:element>
  <!-- base font size -->
  <xs:element name="font">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:coreattrs"/>
          <xs:attributeGroup ref="xhtml:i18n"/>
          <xs:attribute name="size"/>
          <xs:attribute name="color" type="xhtml:Color"/>
          <xs:attribute name="face"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- local change to font -->
  <!-- ==================== Object ====================================== -->
  <!--
    object is used to embed objects as part of HTML pages.
    param elements should precede other content. Parameters
    can also be expressed as attribute/value pairs on the
    object element itself when brevity is desired.
  -->
  <xs:element name="object">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="xhtml:param"/>
        <xs:group ref="xhtml:block"/>
        <xs:element ref="xhtml:form"/>
        <xs:group ref="xhtml:inline"/>
        <xs:group ref="xhtml:misc"/>
      </xs:choice>
      <xs:attributeGroup ref="xhtml:attrs"/>
      <xs:attribute name="declare">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="declare"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="classid" type="xhtml:URI"/>
      <xs:attribute name="codebase" type="xhtml:URI"/>
      <xs:attribute name="data" type="xhtml:URI"/>
      <xs:attribute name="type" type="xhtml:ContentType"/>
      <xs:attribute name="codetype" type="xhtml:ContentType"/>
      <xs:attribute name="archive" type="xhtml:UriList"/>
      <xs:attribute name="standby" type="xhtml:Text"/>
      <xs:attribute name="height" type="xhtml:Length"/>
      <xs:attribute name="width" type="xhtml:Length"/>
      <xs:attribute name="usemap" type="xhtml:URI"/>
      <xs:attribute name="name" type="xs:NMTOKEN"/>
      <xs:attribute name="tabindex" type="xhtml:Number"/>
      <xs:attribute name="align" type="xhtml:ImgAlign"/>
      <xs:attribute name="border" type="xhtml:Pixels"/>
      <xs:attribute name="hspace" type="xhtml:Pixels"/>
      <xs:attribute name="vspace" type="xhtml:Pixels"/>
    </xs:complexType>
  </xs:element>
  <!--
    param is used to supply a named property value.
    In XML it would seem natural to follow RDF and support an
    abbreviated syntax where the param elements are replaced
    by attribute value pairs on the object start tag.
  -->
  <xs:element name="param">
    <xs:complexType>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attribute name="name" use="required"/>
      <xs:attribute name="value"/>
      <xs:attribute name="valuetype" default="data">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="data"/>
            <xs:enumeration value="ref"/>
            <xs:enumeration value="object"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="type" type="xhtml:ContentType"/>
    </xs:complexType>
  </xs:element>
  <!-- =================== Java applet ================================== -->
  <!--
    One of code or object attributes must be present.
    Place param elements before other content.
  -->
  <xs:element name="applet">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="xhtml:param"/>
        <xs:group ref="xhtml:block"/>
        <xs:element ref="xhtml:form"/>
        <xs:group ref="xhtml:inline"/>
        <xs:group ref="xhtml:misc"/>
      </xs:choice>
      <xs:attributeGroup ref="xhtml:coreattrs"/>
      <xs:attribute name="codebase" type="xhtml:URI"/>
      <xs:attribute name="archive"/>
      <xs:attribute name="code"/>
      <xs:attribute name="object"/>
      <xs:attribute name="alt" type="xhtml:Text"/>
      <xs:attribute name="name" type="xs:NMTOKEN"/>
      <xs:attribute name="width" use="required" type="xhtml:Length"/>
      <xs:attribute name="height" use="required" type="xhtml:Length"/>
      <xs:attribute name="align" type="xhtml:ImgAlign"/>
      <xs:attribute name="hspace" type="xhtml:Pixels"/>
      <xs:attribute name="vspace" type="xhtml:Pixels"/>
    </xs:complexType>
  </xs:element>
  <!-- =================== Images =========================================== -->
  <!--
    To avoid accessibility problems for people who aren't
    able to see the image, you should provide a text
    description using the alt and longdesc attributes.
    In addition, avoid the use of server-side image maps.
  -->
  <xs:element name="img">
    <xs:complexType>
      <xs:attributeGroup ref="xhtml:attrs"/>
      <xs:attribute name="src" use="required" type="xhtml:URI"/>
      <xs:attribute name="alt" use="required" type="xhtml:Text"/>
      <xs:attribute name="name" type="xs:NMTOKEN"/>
      <xs:attribute name="longdesc" type="xhtml:URI"/>
      <xs:attribute name="height" type="xhtml:Length"/>
      <xs:attribute name="width" type="xhtml:Length"/>
      <xs:attribute name="usemap" type="xhtml:URI"/>
      <xs:attribute name="ismap">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="ismap"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="align" type="xhtml:ImgAlign"/>
      <xs:attribute name="border" type="xhtml:Length"/>
      <xs:attribute name="hspace" type="xhtml:Pixels"/>
      <xs:attribute name="vspace" type="xhtml:Pixels"/>
    </xs:complexType>
  </xs:element>
  <!--
    usemap points to a map element which may be in this document
    or an external document, although the latter is not widely supported
  -->
  <!-- ================== Client-side image maps ============================ -->
  <!--
    These can be placed in the same document or grouped in a
    separate document although this isn't yet widely supported
  -->
  <xs:element name="map">
    <xs:complexType>
      <xs:choice>
        <xs:choice maxOccurs="unbounded">
          <xs:group ref="xhtml:block"/>
          <xs:element ref="xhtml:form"/>
          <xs:group ref="xhtml:misc"/>
        </xs:choice>
        <xs:element maxOccurs="unbounded" ref="xhtml:area"/>
      </xs:choice>
      <xs:attributeGroup ref="xhtml:i18n"/>
      <xs:attributeGroup ref="xhtml:events"/>
      <xs:attribute name="id" use="required" type="xs:ID"/>
      <xs:attribute name="class"/>
      <xs:attribute name="style" type="xhtml:StyleSheet"/>
      <xs:attribute name="title" type="xhtml:Text"/>
      <xs:attribute name="name"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="area">
    <xs:complexType>
      <xs:attributeGroup ref="xhtml:attrs"/>
      <xs:attributeGroup ref="xhtml:focus"/>
      <xs:attribute name="shape" default="rect" type="xhtml:Shape"/>
      <xs:attribute name="coords" type="xhtml:Coords"/>
      <xs:attribute name="href" type="xhtml:URI"/>
      <xs:attribute name="nohref">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="nohref"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="alt" use="required" type="xhtml:Text"/>
      <xs:attribute name="target" type="xhtml:FrameTarget"/>
    </xs:complexType>
  </xs:element>
  <!-- ================ Forms =============================================== -->
  <xs:element name="form">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:form.content">
          <xs:attributeGroup ref="xhtml:attrs"/>
          <xs:attribute name="action" use="required" type="xhtml:URI"/>
          <xs:attribute name="method" default="get">
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="get"/>
                <xs:enumeration value="post"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name="name" type="xs:NMTOKEN"/>
          <xs:attribute name="enctype" default="application/x-www-form-urlencoded" type="xhtml:ContentType"/>
          <xs:attribute name="onsubmit" type="xhtml:Script"/>
          <xs:attribute name="onreset" type="xhtml:Script"/>
          <xs:attribute name="accept" type="xhtml:ContentTypes"/>
          <xs:attribute name="accept-charset" type="xhtml:Charsets"/>
          <xs:attribute name="target" type="xhtml:FrameTarget"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- forms shouldn't be nested -->
  <!--
    Each label must not contain more than ONE field
    Label elements shouldn't be nested.
  -->
  <xs:element name="label">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
          <xs:attribute name="for" type="xs:IDREF"/>
          <xs:attribute name="accesskey" type="xhtml:Character"/>
          <xs:attribute name="onfocus" type="xhtml:Script"/>
          <xs:attribute name="onblur" type="xhtml:Script"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:simpleType name="InputType">
    <xs:restriction base="xs:token">
      <xs:enumeration value="text"/>
      <xs:enumeration value="password"/>
      <xs:enumeration value="checkbox"/>
      <xs:enumeration value="radio"/>
      <xs:enumeration value="submit"/>
      <xs:enumeration value="reset"/>
      <xs:enumeration value="file"/>
      <xs:enumeration value="hidden"/>
      <xs:enumeration value="image"/>
      <xs:enumeration value="button"/>
    </xs:restriction>
  </xs:simpleType>
  <!-- the name attribute is required for all but submit & reset -->
  <xs:element name="input">
    <xs:complexType>
      <xs:attributeGroup ref="xhtml:attrs"/>
      <xs:attributeGroup ref="xhtml:focus"/>
      <xs:attribute name="type" default="text" type="xhtml:InputType"/>
      <xs:attribute name="name"/>
      <xs:attribute name="value"/>
      <xs:attribute name="checked">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="checked"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="disabled">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="disabled"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="readonly">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="readonly"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="size"/>
      <xs:attribute name="maxlength" type="xhtml:Number"/>
      <xs:attribute name="src" type="xhtml:URI"/>
      <xs:attribute name="alt"/>
      <xs:attribute name="usemap" type="xhtml:URI"/>
      <xs:attribute name="onselect" type="xhtml:Script"/>
      <xs:attribute name="onchange" type="xhtml:Script"/>
      <xs:attribute name="accept" type="xhtml:ContentTypes"/>
      <xs:attribute name="align" type="xhtml:ImgAlign"/>
    </xs:complexType>
  </xs:element>
  <!-- form control -->
  <xs:element name="select">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element ref="xhtml:optgroup"/>
        <xs:element ref="xhtml:option"/>
      </xs:choice>
      <xs:attributeGroup ref="xhtml:attrs"/>
      <xs:attribute name="name"/>
      <xs:attribute name="size" type="xhtml:Number"/>
      <xs:attribute name="multiple">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="multiple"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="disabled">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="disabled"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="tabindex" type="xhtml:Number"/>
      <xs:attribute name="onfocus" type="xhtml:Script"/>
      <xs:attribute name="onblur" type="xhtml:Script"/>
      <xs:attribute name="onchange" type="xhtml:Script"/>
    </xs:complexType>
  </xs:element>
  <!-- option selector -->
  <xs:element name="optgroup">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="xhtml:option"/>
      </xs:sequence>
      <xs:attributeGroup ref="xhtml:attrs"/>
      <xs:attribute name="disabled">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="disabled"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="label" use="required" type="xhtml:Text"/>
    </xs:complexType>
  </xs:element>
  <!-- option group -->
  <xs:element name="option">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="xhtml:attrs"/>
      <xs:attribute name="selected">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="selected"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="disabled">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="disabled"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="label" type="xhtml:Text"/>
      <xs:attribute name="value"/>
    </xs:complexType>
  </xs:element>
  <!-- selectable choice -->
  <xs:element name="textarea">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="xhtml:attrs"/>
      <xs:attributeGroup ref="xhtml:focus"/>
      <xs:attribute name="name"/>
      <xs:attribute name="rows" use="required" type="xhtml:Number"/>
      <xs:attribute name="cols" use="required" type="xhtml:Number"/>
      <xs:attribute name="disabled">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="disabled"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="readonly">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="readonly"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="onselect" type="xhtml:Script"/>
      <xs:attribute name="onchange" type="xhtml:Script"/>
    </xs:complexType>
  </xs:element>
  <!-- multi-line text field -->
  <!--
    The fieldset element is used to group form fields.
    Only one legend element should occur in the content
    and if present should only be preceded by whitespace.
  -->
  <xs:element name="fieldset">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="xhtml:legend"/>
        <xs:group ref="xhtml:block"/>
        <xs:element ref="xhtml:form"/>
        <xs:group ref="xhtml:inline"/>
        <xs:group ref="xhtml:misc"/>
      </xs:choice>
      <xs:attributeGroup ref="xhtml:attrs"/>
    </xs:complexType>
  </xs:element>
  <xs:simpleType name="LAlign">
    <xs:restriction base="xs:token">
      <xs:enumeration value="top"/>
      <xs:enumeration value="bottom"/>
      <xs:enumeration value="left"/>
      <xs:enumeration value="right"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:element name="legend">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
          <xs:attribute name="accesskey" type="xhtml:Character"/>
          <xs:attribute name="align" type="xhtml:LAlign"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- fieldset label -->
  <!-- Content is %Flow; excluding a, form, form controls, iframe -->
  <xs:element name="button">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:button.content">
          <xs:attributeGroup ref="xhtml:attrs"/>
          <xs:attributeGroup ref="xhtml:focus"/>
          <xs:attribute name="name"/>
          <xs:attribute name="value"/>
          <xs:attribute name="type" default="submit">
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="button"/>
                <xs:enumeration value="submit"/>
                <xs:enumeration value="reset"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name="disabled">
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="disabled"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- push button -->
  <!-- single-line text input control (DEPRECATED) -->
  <xs:element name="isindex">
    <xs:complexType>
      <xs:attributeGroup ref="xhtml:coreattrs"/>
      <xs:attributeGroup ref="xhtml:i18n"/>
      <xs:attribute name="prompt" type="xhtml:Text"/>
    </xs:complexType>
  </xs:element>
  <!-- ======================= Tables ======================================= -->
  <!-- Derived from IETF HTML table standard, see [RFC1942] -->
  <!--
    The border attribute sets the thickness of the frame around the
    table. The default units are screen pixels.
    
    The frame attribute specifies which parts of the frame around
    the table should be rendered. The values are not the same as
    CALS to avoid a name clash with the valign attribute.
  -->
  <xs:simpleType name="TFrame">
    <xs:restriction base="xs:token">
      <xs:enumeration value="void"/>
      <xs:enumeration value="above"/>
      <xs:enumeration value="below"/>
      <xs:enumeration value="hsides"/>
      <xs:enumeration value="lhs"/>
      <xs:enumeration value="rhs"/>
      <xs:enumeration value="vsides"/>
      <xs:enumeration value="box"/>
      <xs:enumeration value="border"/>
    </xs:restriction>
  </xs:simpleType>
  <!--
    The rules attribute defines which rules to draw between cells:
    
    If rules is absent then assume:
        "none" if border is absent or border="0" otherwise "all"
  -->
  <xs:simpleType name="TRules">
    <xs:restriction base="xs:token">
      <xs:enumeration value="none"/>
      <xs:enumeration value="groups"/>
      <xs:enumeration value="rows"/>
      <xs:enumeration value="cols"/>
      <xs:enumeration value="all"/>
    </xs:restriction>
  </xs:simpleType>
  <!-- horizontal placement of table relative to document -->
  <xs:simpleType name="TAlign">
    <xs:restriction base="xs:token">
      <xs:enumeration value="left"/>
      <xs:enumeration value="center"/>
      <xs:enumeration value="right"/>
    </xs:restriction>
  </xs:simpleType>
  <!--
    horizontal alignment attributes for cell contents
    
    char        alignment char, e.g. char=':'
    charoff     offset for alignment char
  -->
  <xs:attributeGroup name="cellhalign">
    <xs:attribute name="align">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="left"/>
          <xs:enumeration value="center"/>
          <xs:enumeration value="right"/>
          <xs:enumeration value="justify"/>
          <xs:enumeration value="char"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="char" type="xhtml:Character"/>
    <xs:attribute name="charoff" type="xhtml:Length"/>
  </xs:attributeGroup>
  <!-- vertical alignment attributes for cell contents -->
  <xs:attributeGroup name="cellvalign">
    <xs:attribute name="valign">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="top"/>
          <xs:enumeration value="middle"/>
          <xs:enumeration value="bottom"/>
          <xs:enumeration value="baseline"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="table">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="xhtml:caption"/>
        <xs:choice>
          <xs:element minOccurs="0" maxOccurs="unbounded" ref="xhtml:col"/>
          <xs:element minOccurs="0" maxOccurs="unbounded" ref="xhtml:colgroup"/>
        </xs:choice>
        <xs:element minOccurs="0" ref="xhtml:thead"/>
        <xs:element minOccurs="0" ref="xhtml:tfoot"/>
        <xs:choice>
          <xs:element maxOccurs="unbounded" ref="xhtml:tbody"/>
          <xs:element maxOccurs="unbounded" ref="xhtml:tr"/>
        </xs:choice>
      </xs:sequence>
      <xs:attributeGroup ref="xhtml:attrs"/>
      <xs:attribute name="summary" type="xhtml:Text"/>
      <xs:attribute name="width" type="xhtml:Length"/>
      <xs:attribute name="border" type="xhtml:Pixels"/>
      <xs:attribute name="frame" type="xhtml:TFrame"/>
      <xs:attribute name="rules" type="xhtml:TRules"/>
      <xs:attribute name="cellspacing" type="xhtml:Length"/>
      <xs:attribute name="cellpadding" type="xhtml:Length"/>
      <xs:attribute name="align" type="xhtml:TAlign"/>
      <xs:attribute name="bgcolor" type="xhtml:Color"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="caption">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:attrs"/>
          <xs:attribute name="align" type="xhtml:CAlign"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="thead">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="xhtml:tr"/>
      </xs:sequence>
      <xs:attributeGroup ref="xhtml:attrs"/>
      <xs:attributeGroup ref="xhtml:cellhalign"/>
      <xs:attributeGroup ref="xhtml:cellvalign"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="tfoot">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="xhtml:tr"/>
      </xs:sequence>
      <xs:attributeGroup ref="xhtml:attrs"/>
      <xs:attributeGroup ref="xhtml:cellhalign"/>
      <xs:attributeGroup ref="xhtml:cellvalign"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="tbody">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="xhtml:tr"/>
      </xs:sequence>
      <xs:attributeGroup ref="xhtml:attrs"/>
      <xs:attributeGroup ref="xhtml:cellhalign"/>
      <xs:attributeGroup ref="xhtml:cellvalign"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="colgroup">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="xhtml:col"/>
      </xs:sequence>
      <xs:attributeGroup ref="xhtml:attrs"/>
      <xs:attribute name="span" default="1" type="xhtml:Number"/>
      <xs:attribute name="width" type="xhtml:MultiLength"/>
      <xs:attributeGroup ref="xhtml:cellhalign"/>
      <xs:attributeGroup ref="xhtml:cellvalign"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="col">
    <xs:complexType>
      <xs:attributeGroup ref="xhtml:attrs"/>
      <xs:attribute name="span" default="1" type="xhtml:Number"/>
      <xs:attribute name="width" type="xhtml:MultiLength"/>
      <xs:attributeGroup ref="xhtml:cellhalign"/>
      <xs:attributeGroup ref="xhtml:cellvalign"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="tr">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element ref="xhtml:th"/>
        <xs:element ref="xhtml:td"/>
      </xs:choice>
      <xs:attributeGroup ref="xhtml:attrs"/>
      <xs:attributeGroup ref="xhtml:cellhalign"/>
      <xs:attributeGroup ref="xhtml:cellvalign"/>
      <xs:attribute name="bgcolor" type="xhtml:Color"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="th">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Flow">
          <xs:attributeGroup ref="xhtml:attrs"/>
          <xs:attribute name="abbr" type="xhtml:Text"/>
          <xs:attribute name="axis"/>
          <xs:attribute name="headers" type="xs:IDREFS"/>
          <xs:attribute name="scope" type="xhtml:Scope"/>
          <xs:attribute name="rowspan" default="1" type="xhtml:Number"/>
          <xs:attribute name="colspan" default="1" type="xhtml:Number"/>
          <xs:attributeGroup ref="xhtml:cellhalign"/>
          <xs:attributeGroup ref="xhtml:cellvalign"/>
          <xs:attribute name="nowrap">
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="nowrap"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name="bgcolor" type="xhtml:Color"/>
          <xs:attribute name="width" type="xhtml:Length"/>
          <xs:attribute name="height" type="xhtml:Length"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="td">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Flow">
          <xs:attributeGroup ref="xhtml:attrs"/>
          <xs:attribute name="abbr" type="xhtml:Text"/>
          <xs:attribute name="axis"/>
          <xs:attribute name="headers" type="xs:IDREFS"/>
          <xs:attribute name="scope" type="xhtml:Scope"/>
          <xs:attribute name="rowspan" default="1" type="xhtml:Number"/>
          <xs:attribute name="colspan" default="1" type="xhtml:Number"/>
          <xs:attributeGroup ref="xhtml:cellhalign"/>
          <xs:attributeGroup ref="xhtml:cellvalign"/>
          <xs:attribute name="nowrap">
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="nowrap"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name="bgcolor" type="xhtml:Color"/>
          <xs:attribute name="width" type="xhtml:Length"/>
          <xs:attribute name="height" type="xhtml:Length"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:simpleType name="CAlign">
    <xs:restriction base="xs:token">
      <xs:enumeration value="top"/>
      <xs:enumeration value="bottom"/>
      <xs:enumeration value="left"/>
      <xs:enumeration value="right"/>
    </xs:restriction>
  </xs:simpleType>
  <!--
    colgroup groups a set of col elements. It allows you to group
    several semantically related columns together.
  -->
  <!--
    col elements define the alignment properties for cells in
    one or more columns.
    
    The width attribute specifies the width of the columns, e.g.
    
        width=64        width in screen pixels
        width=0.5*      relative width of 0.5
    
    The span attribute causes the attributes of one
    col element to apply to more than one column.
  -->
  <!--
    Use thead to duplicate headers when breaking table
    across page boundaries, or for static headers when
    tbody sections are rendered in scrolling panel.
    
    Use tfoot to duplicate footers when breaking table
    across page boundaries, or for static footers when
    tbody sections are rendered in scrolling panel.
    
    Use multiple tbody sections when rules are needed
    between groups of table rows.
  -->
  <!-- Scope is simpler than headers attribute for common tables -->
  <xs:simpleType name="Scope">
    <xs:restriction base="xs:token">
      <xs:enumeration value="row"/>
      <xs:enumeration value="col"/>
      <xs:enumeration value="rowgroup"/>
      <xs:enumeration value="colgroup"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>
<!-- th is for headers, td for data and for cells acting as both -->
